# -*- coding: utf-8 -*-
"""Homework2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vH5yJRbQ8pLAP5Pa5CmAGsi3KLIltohF

**1.Сортировка в обратном порядке**

Пользователь сначала вводит количество чисел, а затем вводит сами числа, ваша задача отсортировать введенные пользователем числа и вывести их в обратном порядке.
"""

#что значит отсортирвать, просто по порядку или одинаковые тоже надо убрать?
n = int(input('Введите количество чисел '))
lst = ''
for i in range(n):
  number = str(input('Введите число '))
  lst += number
print(' '.join(reversed(sorted(list(lst)))))

"""**2.Фильтр**

Напишите программу, которая проводит первичную обработку неких сложных и
глючных логов. Нужно удалить сочетание «%%» в начале некоторых строк и удалить
строки, начинающиеся с «####».

"""

strok = input('Введите строки через запятую ').split(',')
for i in range(len(strok)):
  if '%%' in strok[i]:
    print(strok[i].replace('%%',''))
  elif '###' in strok[i]:
    print('')
  else:
    print(strok[i])

"""**3.От и до**

Напишите программу, которая считывает список чисел, а затем выводит сумму в
диапазоне от заданного до заданного. При этом в программе не должно
использоваться обращение к элементам по индексу.

На первой строке вводится натуральное число N — количество чисел
в списке.

Далее следуют N целых чисел из списка, каждое на отдельной
строке.

Затем на отдельных строках следуют начальный (p) и конечный (q) номера
элементов списка, который нужно просуммировать. Нумерация идёт с единицы. Гарантируется,
что 1≤ p ≤ q ≤ N.

"""

#срез - это обращение к индексу?
n = int(input('Введите количество чисел '))
num = []
for i in range(n):
  number = int(input('Введите число ' ))
  num.append(number)
p, q = int(input('p = ')), int(input('q = '))
print('Сумма равна = ', sum(num[p-1:q]))

"""**4. Список отличников**

В школе №13 отличников по программированию награждают поездкой в Артек, но счастливых учеников может быть больше, чем свободных мест - ваша задача определить отличников и если их больше чем свободных мест, то отсортировать их по фамилии и вывести тех, кто едет.

Напишите функцию Artek(s, n), которая принимает в качестве параметра строку, содержащую имена отличников и их оценку, и число - количество свободных мест. Функция должна печатать фамилии тех, кто едет.

"""

def Artek(s, n):
  people = []
  for i in range(len(s)):
    p = list(s[i].split())
    if int(p[1]) == 5:
      people.append(p[0])
  m = sorted(people)
  print(', '.join(m[0:n]))

s = input().split(',')
n = int(input())
Artek(s, n)

"""**5. Пароль (*)**

Переделайте программу для пароля из первой домашней работы так:
1. Пароль должен содержать 6 или более символов - иначе функция
должна печатать "Недопустимый пароль".
2. Если в пароле содержатся только цифры или только буквы одного
регистра, функция должна печатать "Ненадежный пароль".
3. Если в пароле содержатся буквы разных регистров или буквы
одного регистра и цифры, функция должна печатать "Слабый пароль".
4. Если в пароле содержатся и цифры, и буквы разных регистров,
функция должна печатать "Надежный пароль".

Напишите функцию password_level(), которая
принимает на вход строку и определяет, является ли она надежным паролем.

"""

def password_level(n):
  # Для проверки на числа
  s = list(filter(None,['df' if i.isdigit() else n.replace(n,'',1) for i in n]))
  if len(s) == 0 or len(s) == len(n):
    s1 = 2 #Только буквы или цифры
  else:
    s1 = 1 #Буквы и цифры

  # Для проверки на регистр
  r = list(filter(None,['df' if i.isupper() else n.replace(n, '') for i in n]))
  if len(r) == 0 or len(r) == len(n):
    r1 = 2 #Одинаковый регистр
  else:
    r1 = 1 #Разный регистр

  #Проверка надежности
  if len(n) < 6:
    print('Недопустимый пароль')
  else:
    if s1 == 2 and r1 == 2:
      print('Ненадежный пароль')
    else:
      if (r1 == 1 and s1 == 2) or (r1 == 2 and s1 == 1):
        print('Слабый пароль')
      elif r1 == 1 and r1 == 1:
        print('Надежный пароль')


#Вызов функции
passworld = input()
password_level(passworld)